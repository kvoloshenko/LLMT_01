# -*- coding: utf-8 -*-
"""OpenLesson2 TGbot.ipynb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-U9xvN4IwSmVQNNKz-bgN1yiyWJrK4L8

## update_context.py
"""

from telegram.ext import Application, CommandHandler, MessageHandler, filters
from dotenv import load_dotenv
import time
import os
import chat_gpt

# возьмем переменные окружения из .env
load_dotenv()

# загружаем токен бота
TOKEN = os.environ.get("TOKEN")
print (f'TOKEN = {TOKEN}')
SYSTEM_DOC_URL = os.environ.get("SYSTEM_DOC_URL") # промпт
print (f'SYSTEM_DOC_URL = {SYSTEM_DOC_URL}')
KNOWLEDGE_BASE_URL = os.environ.get("KNOWLEDGE_BASE_URL") # база знаний
print (f'KNOWLEDGE_BASE_URL = {KNOWLEDGE_BASE_URL}')

def tg_gpt_01(t_system,t_user):
  print(f't_system={t_system}')
  print(f't_user={t_user}')
  result = chat_gpt.openai.ChatCompletion.create(
    model="gpt-3.5-turbo",
    messages=[
          {"role": "system", "content": t_system},
          {"role": "user", "content": t_user}
      ]
  )
  message = result['choices'][0]['message']['content']
  # print(message)
  return message

def tg_gpt_02 (topic):
  # system_doc_url = 'https://docs.google.com/document/d/1eG-WfEiwyJZIZPgi-GK7-Q9ueO1FNcgfvFjsAf99N6g'        # промпт
  # knowledge_base_url = 'https://docs.google.com/document/d/1uKznFpg5uDuSd65QUMEcuyxB1NfrKqk93BOoG0wwYQg'    # база знаний
  system_doc_url = SYSTEM_DOC_URL
  knowledge_base_url = KNOWLEDGE_BASE_URL
  # topic= "сколько времени нужно будет уделять учебе, чтобы освоить всю программу?"
  ans = chat_gpt.answer_user_question(system_doc_url, knowledge_base_url, topic)
  return ans




# функция команды /start
async def start(update, context):
  await update.message.reply_text('Привет! Это update_context бот.')


# функция для текстовых сообщений
async def text(update, context):

    # использование update
    print(update)
    print('-------------------')
    print(f'text: {update.message.text}')
    print(f'date: {update.message.date}')
    print(f'id message: {update.message.message_id}')
    print(f'name: {update.message.from_user.first_name}')
    print(f'user.id: {update.message.from_user.id}')
    # print('-------------------')

    t_system = 'Ты - Эксперт по продвижению товаров в телеграм'
    # t_user = 'Как правильно писать продающие посты в телеграм?'
    # t_user = update.message.text
    # gm = tg_gpt_01(t_system,t_user)
    topic = update.message.text
    gm = tg_gpt_02(topic)

    # my_message = await update.message.reply_text(f'Получено текстовое сообщение: {update.message.text}')
    my_message = await update.message.reply_text(f'{gm}')
    print(f'answer: {gm}')
    print('-------------------')

    # использованеи context

    #time.sleep(5)
    # УДАЛЕНИЕ сообщений
    #                    update.message.chat_id - получаем сообщение и message_id получаем из переменной my_message
    #await context.bot.deleteMessage(chat_id=update.message.chat_id, message_id=my_message.message_id)

    # закрепление сообщений
    # await context.bot.pin_chat_message(chat_id=update.message.chat_id, message_id=update.message.message_id)

    # изменение описания бота
    # await context.bot.set_my_short_description("Этот бот очень умный, добрый и красивый")



def main():

    # точка входа в приложение
    application = Application.builder().token(TOKEN).build()
    print('Бот запущен..!')

    # добавляем обработчик команды /start
    application.add_handler(CommandHandler("start", start))

    # добавляем обработчик текстовых сообщений
    application.add_handler(MessageHandler(filters.TEXT, text))

    # запуск приложения (для остановки нужно нажать Ctrl-C)
    application.run_polling()


if __name__ == "__main__":
    main()